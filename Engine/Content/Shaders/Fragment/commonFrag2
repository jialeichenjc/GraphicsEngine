#include <Shaders/shaders.inc>

// Constant Buffers
//=================

DeclareConstantBuffer( g_constantBuffer_perFrame, 0 ) {
	float g_elapsedSecondCount_systemTime;
	float g_elapsedSecondCount_simulationTime;
	// For vec4 alignment
	float2 g_padding;
};

DeclareConstantBuffer( g_constantBuffer_perMaterial, 1 )  {
	float4 g_color;
};


// Texture
//========

DeclareTextures(g_color_texture, g_color_samplerState, 0);

// Entry Point
//============

#if defined( EAE6320_PLATFORM_D3D )

void main(

	// Input
	//======

	// These values come from one of the VertexFormats::sGeometry that the vertex buffer was filled with in C code
	in const float4 i_position : SV_POSITION,

    in const float2 i_texture : TEXCOORD0,

	// Output
	//=======

	// Whatever color value is output from the fragment shader
	// will determine the color of the corresponding pixel on the screen
	out float4 o_color : SV_TARGET

	)

#elif defined( EAE6320_PLATFORM_GL )

// Input
//======

layout( location = 0 ) in vec2 i_texture;

// Output
//=======

// Whatever color value is output from the fragment shader
// will determine the color of the corresponding pixel on the screen
out float4 o_color;

void main()
#endif
{
	// Output solid white
	o_color = float4(
		// RGB
		1.0, 1.0, 1.0,
		// Alpha
		1.0 );
		
	// EAE6320_TODO: Change the color based on time!
	// The value g_elapsedSecondCount_simulationTime constantly changes as the simulation progresses, and so by doing something like:
	//	sin( g_elapsedSecondCount_simulationTime ) or cos( g_elapsedSecondCount_simulationTime )
	// you can get a value that will oscillate between [-1,1].
	// You should change at least one "channel" so that the color animates.
	// For example, to change red ("r") you would do something kind of like:
	//		o_color.r = ? sin( g_elapsedSecondCount_simulationTime ) ?
	// You can change .r, .g, and .b (but leave .a as 1.0).
	// Remember that your final values should be [0,1], so you will have to do some math.

	// g_color_texture.Sample( g_color_samplerState, i_texture );

	SampledColor sampledColor = GetSampledColor( g_color_texture, g_color_samplerState );

	o_color = o_color * sampledColor;

}